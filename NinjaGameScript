local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local UIS = game:GetService("UserInputService")
local ReplicatedStorage = game:GetService("ReplicatedStorage")

local player = Players.LocalPlayer
local root = nil
local speed = 25
local cam = workspace.CurrentCamera

-- Assets
local trailTemplate = ReplicatedStorage:WaitForChild("TrailSegment")
local tileTemplate = ReplicatedStorage:WaitForChild("TerritoryTile")

-- Trail tracking
local lastTrailPosition = nil
local currentTrailParts = {}
local playerColor = BrickColor.Random().Color
local claimedTiles = {}

-- Snap helper
local function snapToGrid(pos, gridSize)
	return Vector3.new(
		math.floor(pos.X / gridSize + 0.5) * gridSize,
		pos.Y,
		math.floor(pos.Z / gridSize + 0.5) * gridSize
	)
end

-- Point-in-polygon check
local function isPointInPolygon(point, polygon)
	local inside = false
	local j = #polygon
	for i = 1, #polygon do
		local xi, zi = polygon[i].X, polygon[i].Z
		local xj, zj = polygon[j].X, polygon[j].Z
		if ((zi > point.Z) ~= (zj > point.Z)) and
			(point.X < (xj - xi) * (point.Z - zi) / (zj - zi + 1e-8) + xi) then
			inside = not inside
		end
		j = i
	end
	return inside
end

-- Fill enclosed area with tiles
local function fillArea()
	if #currentTrailParts < 3 then return end

	local trailPolygon = {}
	for _, part in ipairs(currentTrailParts) do
		table.insert(trailPolygon, Vector3.new(part.Position.X, 0, part.Position.Z))
	end

	local minX, maxX, minZ, maxZ = math.huge, -math.huge, math.huge, -math.huge
	for _, v in ipairs(trailPolygon) do
		minX = math.min(minX, v.X)
		maxX = math.max(maxX, v.X)
		minZ = math.min(minZ, v.Z)
		maxZ = math.max(maxZ, v.Z)
	end

	local tileSize = 4
	for x = minX, maxX, tileSize do
		for z = minZ, maxZ, tileSize do
			local testPoint = Vector3.new(x, 0, z)
			if isPointInPolygon(testPoint, trailPolygon) then
				local pos = Vector3.new(x, currentTrailParts[1].Position.Y, z)
				pos = snapToGrid(pos, tileSize)

				local tileKey = pos.X .. "," .. pos.Z
				if not claimedTiles[tileKey] then
					local tile = tileTemplate:Clone()
					tile.Position = pos
					tile.Color = playerColor
					tile.Name = "TerritoryTile"
					tile.Anchored = true
					tile.CanCollide = false
					tile.Parent = workspace
					claimedTiles[tileKey] = true
				end
			end
		end
	end

	for _, part in ipairs(currentTrailParts) do
		part.BrickColor = BrickColor.new(playerColor)
	end
	currentTrailParts = {}
end

-- Character spawn logic
player.CharacterAdded:Connect(function(char)
	root = char:WaitForChild("HumanoidRootPart")

	local baseplate = workspace:WaitForChild("Baseplate")
	local bpPos, bpSize = baseplate.Position, baseplate.Size
	local minX = bpPos.X - bpSize.X / 3
	local maxX = bpPos.X + bpSize.X / 3
	local minZ = bpPos.Z - bpSize.Z / 3
	local maxZ = bpPos.Z + bpSize.Z / 2
	local spawnX = math.random() * (maxX - minX) + minX
	local spawnZ = math.random() * (maxZ - minZ) + minZ
	local spawnY = bpPos.Y + bpSize.Y / 5 + 6
	root.CFrame = CFrame.new(Vector3.new(spawnX, spawnY, spawnZ))

	cam.CameraType = Enum.CameraType.Scriptable
	RunService.RenderStepped:Connect(function()
		if root then
			cam.CFrame = CFrame.new(root.Position + Vector3.new(0, 60, 0), root.Position)
		end
	end)

	local tileSize = 4
	local tileHeightOffset = 0.1
	local baseY = baseplate.Position.Y + baseplate.Size.Y / 2 + tileHeightOffset

	for dx = -1, 1 do
		for dz = -1, 1 do
			local pos = Vector3.new(
				math.floor(root.Position.X / tileSize + dx + 0.5) * tileSize,
				baseY,
				math.floor(root.Position.Z / tileSize + dz + 0.5) * tileSize
			)

			local tile = tileTemplate:Clone()
			tile.Position = pos
			tile.Color = playerColor
			tile.Name = "TerritoryTile"
			tile.Anchored = true
			tile.CanCollide = false
			tile.Parent = workspace

			local key = pos.X .. "," .. pos.Z
			claimedTiles[key] = true
		end
	end
end)

-- Movement and trail
RunService.RenderStepped:Connect(function(dt)
	if not root then return end

	local mousePos = UIS:GetMouseLocation()
	local ray = cam:ViewportPointToRay(mousePos.X, mousePos.Y)
	local groundY = root.Position.Y
	local intersection = ray.Origin + ray.Direction * ((groundY - ray.Origin.Y) / ray.Direction.Y)
	local direction = (intersection - root.Position)
	direction = Vector3.new(direction.X, 0, direction.Z).Unit

	root.CFrame = CFrame.new(root.Position, root.Position + direction)
	root.CFrame = root.CFrame + root.CFrame.LookVector * speed * dt

	if lastTrailPosition then
		local currentPos = root.Position
		local distance = (currentPos - lastTrailPosition).Magnitude

		if distance > 0.1 then
			local midPoint = (currentPos + lastTrailPosition) / 2
			local angle = CFrame.lookAt(midPoint, currentPos)

			local trail = trailTemplate:Clone()
			trail.Size = Vector3.new(1, 0.2, distance)
			trail.CFrame = angle * CFrame.new(0, 0, -distance / 2)
			trail.Color = playerColor
			trail.Material = Enum.Material.Neon
			trail.Anchored = true
			trail.CanCollide = false
			trail.Parent = workspace

			table.insert(currentTrailParts, trail)

			local region = Region3.new(
				Vector3.new(trail.Position.X - 1, 0, trail.Position.Z - 1),
				Vector3.new(trail.Position.X + 1, trail.Position.Y + 5, trail.Position.Z + 1)
			):ExpandToGrid(4)

			local touching = workspace:FindPartsInRegion3(region, nil, math.huge)
			for _, p in ipairs(touching) do
				if p.Name == "TerritoryTile" and p.Color == playerColor then
					fillArea()
					break
				end
			end
		end
	end

	lastTrailPosition = root.Position
end)
